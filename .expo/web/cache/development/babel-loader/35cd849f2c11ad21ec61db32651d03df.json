{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { auth, fireDB, storage } from \"../firebase\";\nvar chatDBRef = fireDB.collection('chats');\n\nvar storeChat = function storeChat(chatId, message, loggedInUserId) {\n  console.log('message: ', message);\n  return new Promise(function _callee(resolve, reject) {\n    var result;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              result = chatDBRef.doc(chatId).collection('chatData').add({\n                userId: loggedInUserId,\n                text: message.text,\n                createdAt: message.createdAt\n              });\n              resolve(result);\n            } catch (error) {\n              reject(error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\n\nvar getChat = function getChat(chatId) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var allChat = chatDBRef.doc(chatId).collection('chatData').onSnapshot(function (querySnapshot) {\n        var messagesFromFirestore = querySnapshot.docChanges().map(function (_ref) {\n          var doc = _ref.doc;\n          var message = doc.data();\n          return _objectSpread(_objectSpread({\n            _id: doc.id\n          }, message), {}, {\n            createdAt: message.createdAt.toDate()\n          });\n        }).sort(function (a, b) {\n          return b.createdAt.getTime() - a.createdAt.getTime();\n        });\n        resolve(messagesFromFirestore);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport { storeChat, getChat };","map":{"version":3,"names":["auth","fireDB","storage","chatDBRef","collection","storeChat","chatId","message","loggedInUserId","console","log","Promise","resolve","reject","result","doc","add","userId","text","createdAt","error","getChat","allChat","onSnapshot","querySnapshot","messagesFromFirestore","docChanges","map","data","_id","id","toDate","sort","a","b","getTime"],"sources":["/Users/stavan/Documents/End_Sem_Project/API/chat.js"],"sourcesContent":["import { auth, fireDB, storage } from '../firebase';\n// const loggedInUserId = auth.currentUser.uid;\nconst chatDBRef = fireDB.collection('chats');\n\nconst storeChat = (chatId, message, loggedInUserId) => {\n    console.log('message: ', message);\n    return new Promise(async (resolve, reject) => {\n        try {\n            let result = chatDBRef.doc(chatId).collection('chatData').add({\n                userId: loggedInUserId,\n                text: message.text,\n                createdAt: message.createdAt\n            })\n            resolve(result);\n            \n        } catch (error) {\n            reject(error);\n        }\n    })\n}\n\nconst getChat = (chatId) => {\n    return new Promise((resolve, reject) => {\n        try {\n            let allChat = chatDBRef.doc(chatId).collection('chatData').onSnapshot((querySnapshot) => {\n                const messagesFromFirestore = querySnapshot.docChanges().map(({doc}) => {\n                    const message = doc.data();\n                    return { \n                        _id: doc.id,    // chatId\n                        ...message, \n                        createdAt: message.createdAt.toDate()\n                    }\n                }).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n                resolve(messagesFromFirestore);\n            })\n            \n        } catch (error) {\n            reject(error);\n        }\n    })\n}\n\n\n\nexport{ storeChat, getChat };"],"mappings":";;;;;;;AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,OAAvB;AAEA,IAAMC,SAAS,GAAGF,MAAM,CAACG,UAAP,CAAkB,OAAlB,CAAlB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAASC,OAAT,EAAkBC,cAAlB,EAAqC;EACnDC,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,OAAzB;EACA,OAAO,IAAII,OAAJ,CAAY,iBAAOC,OAAP,EAAgBC,MAAhB;IAAA;IAAA;MAAA;QAAA;UAAA;YACf,IAAI;cACIC,MADJ,GACaX,SAAS,CAACY,GAAV,CAAcT,MAAd,EAAsBF,UAAtB,CAAiC,UAAjC,EAA6CY,GAA7C,CAAiD;gBAC1DC,MAAM,EAAET,cADkD;gBAE1DU,IAAI,EAAEX,OAAO,CAACW,IAF4C;gBAG1DC,SAAS,EAAEZ,OAAO,CAACY;cAHuC,CAAjD,CADb;cAMAP,OAAO,CAACE,MAAD,CAAP;YAEH,CARD,CAQE,OAAOM,KAAP,EAAc;cACZP,MAAM,CAACO,KAAD,CAAN;YACH;;UAXc;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAZ,CAAP;AAaH,CAfD;;AAiBA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACf,MAAD,EAAY;EACxB,OAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;IACpC,IAAI;MACA,IAAIS,OAAO,GAAGnB,SAAS,CAACY,GAAV,CAAcT,MAAd,EAAsBF,UAAtB,CAAiC,UAAjC,EAA6CmB,UAA7C,CAAwD,UAACC,aAAD,EAAmB;QACrF,IAAMC,qBAAqB,GAAGD,aAAa,CAACE,UAAd,GAA2BC,GAA3B,CAA+B,gBAAW;UAAA,IAATZ,GAAS,QAATA,GAAS;UACpE,IAAMR,OAAO,GAAGQ,GAAG,CAACa,IAAJ,EAAhB;UACA;YACIC,GAAG,EAAEd,GAAG,CAACe;UADb,GAEOvB,OAFP;YAGIY,SAAS,EAAEZ,OAAO,CAACY,SAAR,CAAkBY,MAAlB;UAHf;QAKH,CAP6B,EAO3BC,IAP2B,CAOtB,UAACC,CAAD,EAAIC,CAAJ;UAAA,OAAUA,CAAC,CAACf,SAAF,CAAYgB,OAAZ,KAAwBF,CAAC,CAACd,SAAF,CAAYgB,OAAZ,EAAlC;QAAA,CAPsB,CAA9B;QASAvB,OAAO,CAACa,qBAAD,CAAP;MACH,CAXa,CAAd;IAaH,CAdD,CAcE,OAAOL,KAAP,EAAc;MACZP,MAAM,CAACO,KAAD,CAAN;IACH;EACJ,CAlBM,CAAP;AAmBH,CApBD;;AAwBA,SAAQf,SAAR,EAAmBgB,OAAnB"},"metadata":{},"sourceType":"module"}